<project
	xmlns="http://maven.apache.org/POM/4.0.0"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>

	<groupId>com.dianqingoa.demo</groupId>
	<artifactId>dianqingOApageObject</artifactId>
	<version>0.0.1-SNAPSHOT</version>
	<packaging>jar</packaging>

	<!--maven运行测试name-->
	<name>dianqingOApageObject</name>
	<url>http://maven.apache.org</url>

	<properties>
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
	</properties>

	<dependencies>

	<!--https://mvnrepository.com/artifact/org.testng/testng-->
	<dependency>
		<groupId>org.testng</groupId>
		<artifactId>testng</artifactId>
		<version>6.14.2</version>
		<scope>test</scope>
	</dependency>

	<!--https://mvnrepository.com/artifact/org.uncommons/reportng-->
	<dependency>
	<groupId>org.uncommons</groupId>
	<artifactId>reportng</artifactId>
	<version>1.1.4</version>
	<scope>test</scope>
		<exclusions>
			<exclusion>
				<groupId>org.testng</groupId>
				<artifactId>testng</artifactId>
			</exclusion>
		</exclusions>
	</dependency>

	<!--https://mvnrepository.com/artifact/com.google.inject/guice-->
	<dependency>
		<groupId>com.google.inject</groupId>
		<artifactId>guice</artifactId>
		<version>3.0</version>
	</dependency>
	
	<!--https://mvnrepository.com/artifact/org.seleniumhq.selenium/selenium-java-->
	<dependency>
		<groupId>org.seleniumhq.selenium</groupId>
		<artifactId>selenium-java</artifactId>
		<version>3.10.0</version>
		<scope>compile</scope>
			<!--
				scope标签中对应值的解释：
					*compile，缺省值，适用于所有阶段，会随着项目一起发布。
					*provided，类似compile，期望JDK、容器或使用者会提供这个依赖。如servlet.jar。
					*runtime，只在运行时使用，如JDBC驱动，适用运行和测试阶段。
					*test，只在测试时使用，用于编译和运行测试代码。不会随项目发布。
					*system，类似provided，需要显式提供包含依赖的jar，Maven不会在Repository中查找它。
			-->
    </dependency>

	<!--https://mvnrepository.com/artifact/org.seleniumhq.selenium/selenium-api-->
	<dependency>
			<groupId>org.seleniumhq.selenium</groupId>
			<artifactId>selenium-api</artifactId>
			<version>3.10.0</version>
	</dependency>
	
	<!--https://mvnrepository.com/artifact/org.apache.maven.plugins/maven-surefire-plugin-->
	<dependency>
		<groupId>org.apache.maven.plugins</groupId>
		<artifactId>maven-surefire-plugin</artifactId><!--测试运行器（Test Runner）能很好的兼容JUnit 3、JUnit 4以及TestNG-->
		<version>2.21.0</version>
	</dependency>
	
	<!--https://mvnrepository.com/artifact/org.apache.xmlbeans/xmlbeans-->
	<dependency>
		<groupId>org.apache.xmlbeans</groupId>
		<artifactId>xmlbeans</artifactId><!-- 一个XML-Java绑定工具，利用它可以很方便地解析XML文档 -->
		<version>2.6.0</version>
	</dependency>

	<!--https://mvnrepository.com/artifact/dom4j/dom4j-->
	<dependency>
		<groupId>dom4j</groupId>
		<artifactId>dom4j</artifactId><!-- dom4j是一个Java的XML API，是jdom的升级品，用来读写XML文件的。 -->
		<version>1.6.1</version>
	</dependency>
	
	<!--https://mvnrepository.com/artifact/org.apache.poi/poi-ooxml-->
	<dependency>
		<groupId>org.apache.poi</groupId>
		<artifactId>poi-ooxml</artifactId><!-- excel操作 -->
		<version>3.10-FINAL</version>
		</dependency>
	</dependencies>

	<build>
		<plugins>
		
			<!--添加插件关联testNg.xml-->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-surefire-plugin</artifactId>
				<version>2.21.0</version>
				<configuration>
					<suiteXmlFiles>
						<suiteXmlFile>testng.xml</suiteXmlFile>
					</suiteXmlFiles>
				<testFailureIgnore>true</testFailureIgnore>           
	<!-- 			</configuration>
			</plugin> -->

			<!--添加插件,添加ReportNg的监听器，修改最后的TestNg的报告-->
		<!-- 	<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-surefire-plugin</artifactId>
				<version>2.21.0</version>
				<configuration> -->
				<properties>
					<property>
						<name>usedefaultlisteners</name>
						<value>false</value>
					</property>
					
					<property>
						<name>listener</name>
						<value>org.uncommons.reportng.HTMLReporter</value>
					</property>
					
				</properties>
				
				<testFailureIgnore>false</testFailureIgnore>
				<!-- <workingDirectory>target/</workingDirectory> --><!-- 用这个会因找不到外部的配置文件而出错 -->
					 <outputDirectory>${basedir}/target/</outputDirectory>
				<!--<forkMode>always</forkMode>-->
				
				</configuration>
			</plugin>
		</plugins>
	</build>

</project>

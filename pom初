<project
	xmlns="http://maven.apache.org/POM/4.0.0"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>

	<groupId>com.dianqingoa.demo</groupId>
	<artifactId>dianqingOApageObject</artifactId>
	<version>0.0.1-SNAPSHOT</version>
	<packaging>jar</packaging>

	<!-- maven 运行测试name -->
	<name>dianqingOApageObject</name>
	<url>http://maven.apache.org</url>

	<!-- maven 参数配置，这里引用不同的testng.xml -->
	<properties>
		<!-- 文件拷贝时的编码 -->
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding><!-- 让整个项目统一字符集编码 -->
		<project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
        <!-- 编译时的编码 -->
        <maven.compiler.encoding>UTF-8</maven.compiler.encoding>
    	<!-- <argLine>-Dfile.encoding=UTF-8</argLine> --><!-- 解决控制台中文乱码  -->
		<xmlFileName>testng.xml</xmlFileName>
		<!-- 设置时间格式 -->
		<maven.build.timestamp.format>yyyyMMddHHmmss</maven.build.timestamp.format>
	</properties>

	<!-- maven 引用依赖不同的jar -->
	<dependencies>
		<dependency>
			<groupId>junit</groupId>  <!-- 项目组织唯一标识 -->
			<artifactId>junit</artifactId>  <!-- 项目唯一标识 -->
			<version>3.8.1</version>
			<scope>test</scope>
		</dependency>

		<!-- 依赖testNg -->
		<dependency>
			<groupId>org.testng</groupId>
			<artifactId>testng</artifactId>
			<version>6.14.2</version>
			<scope>test</scope>
		</dependency>

		<!-- 加入selenium做webUI测试,选用selenium2 -->
		<dependency>
			<groupId>org.seleniumhq.selenium</groupId>
			<artifactId>selenium-java</artifactId>
			<version>2.44.0</version>
		</dependency>

		<dependency>
			<groupId>org.seleniumhq.selenium</groupId>
			<artifactId>selenium-server</artifactId>
			<version>2.44.0</version>
		</dependency>

		<!-- 导入本地jar包文件 -->
		<!-- <dependency> <groupId>org.uncommons</groupId> <artifactId>reportng</artifactId> 
			<version>1.1.5</version> <scope>system</scope> <systemPath>${project.basedir}/lib/reportng-1.1.5.jar</systemPath> 
			</dependency> -->

		<!-- 日志 -->
		<!-- https://mvnrepository.com/artifact/log4j/log4j -->
		<dependency>
			<groupId>log4j</groupId>
			<artifactId>log4j</artifactId>
			<version>1.2.17</version>
		</dependency>

		<!-- 加入reportNG依赖，关联testNg,代替testNG测试报告 -->
		<dependency>
			<groupId>org.uncommons</groupId>
			<artifactId>reportng</artifactId>
			<version>1.1.4</version>
			<scope>test</scope>
			<exclusions>
				<exclusion>
					<groupId>org.testng</groupId>
					<artifactId>testng</artifactId>
				</exclusion>
			</exclusions>
		</dependency>

		<!-- ReportNG 报告优化使用 -->
		<!-- 依赖Guice,guice提供了强大的注入方式。1.属性注入2.构造器注入3.set方式注入 -->
		<!-- @Singleton与@Inject配合使用 -->
		<dependency>
			<groupId>com.google.inject</groupId>
			<artifactId>guice</artifactId>
			<version>3.0</version>
			<scope>test</scope>
		</dependency>
		
		<!-- https://mvnrepository.com/artifact/org.apache.poi/poi 依赖poi -->
		<dependency>
			<groupId>org.apache.poi</groupId>
			<artifactId>poi</artifactId><!-- 用于操作EXCEL和WORD的工具包 -->
			<version>3.17</version>
		</dependency>
		<!-- https://mvnrepository.com/artifact/net.sourceforge.jexcelapi/jxl 依赖jxl -->
		<dependency>
			<groupId>net.sourceforge.jexcelapi</groupId>
			<artifactId>jxl</artifactId><!-- 通过java操作excel表格的工具类库，是由java语言开发而成的 -->
			<version>2.6.12</version>
		</dependency>

		<!-- ReportNG 报告优化使用 -->
		<!-- Velocity视图解析器 -->
		<dependency>
			<groupId>velocity</groupId>
			<artifactId>velocity</artifactId>
			<version>1.4</version>
		</dependency>

		<!-- testng-xslt 报告优化需引用jar -->
		<dependency>
			<groupId>org.apache.maven</groupId>
			<artifactId>maven-plugin-api</artifactId>
			<version>2.0.4</version>
		</dependency>
		<dependency>
			<groupId>org.apache.maven.reporting</groupId>
			<artifactId>maven-reporting-api</artifactId>
			<version>2.0</version>
		</dependency>
		<dependency>
			<groupId>org.apache.maven.reporting</groupId>
			<artifactId>maven-reporting-impl</artifactId>
			<version>2.0</version>
		</dependency>
		<dependency>
			<groupId>net.sf.saxon</groupId>
			<artifactId>saxon</artifactId>
			<version>8.7</version>
		</dependency>

	</dependencies>
	<build>
		<plugins>
			<!-- 资源配置插件：不配置就默认 -->
			<!-- 设置xml、properties资源文件的编码格式 -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-resources-plugin</artifactId>
				<version>3.0.2</version>
				<configuration>
					<encoding>${project.build.sourceEncoding}</encoding>
				</configuration>
			</plugin>

			<!-- 编译插件： -->
			<plugin>
				<!-- 使用maven-compiler-plugin插件可以指定项目源码的jdk版本，编译后的jdk版本，以及编码 -->
				<!-- 指定maven编译的jdk版本,如果不指定,maven3默认用jdk 1.5 maven2默认用jdk1.3 -->
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-compiler-plugin</artifactId>
				<version>2.3.2</version>
				<configuration>
					<source>1.8</source><!-- 源代码编译版本 -->
					<target>1.8</target><!-- 目标平台编译版本 -->
					<encoding>UTF-8</encoding><!-- 字符集编码，解决"编码 GBK 的不可映射字符"问题 --><!-- 指定编码格式，否则在DOS下运行mvn compile命令时会出现莫名的错误，因为系统默认使用GBK编码 -->
					<!-- <source>${project.compile.version}</source> <target>${project.compile.version}</target> 
						<encoding>${project.build.sourceEncoding}</encoding> -->
				</configuration>
			</plugin>

			<!-- 测试插件： -->
			<!-- 添加插件 关联testNg.xml,surefire插件其实就是一个容器 -->
			<plugin>
				<!-- 加入maven-surefire-plugin插件用来使用maven执行用例，其中suiteXmlFile配置的就是testNG用例执行文件的地址，不显示配置就会用默认配置。 -->
				<!-- surefire 插件用来在maven构建生命周期的test phase执行一个应用的单元测试。它会产生两种不同形式的测试结果报告： 
					1.纯文本 ,2.xml文件格式的。默认情况下，这些文件生成在工程的${basedir}/target/surefire-reports目录下 （basedir指的是pom文件所在的目录）。 
					它可以运行任何testNG,Junit,pojo写的单元测试 -->
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-surefire-plugin</artifactId>
				<version>2.18.1</version>
				<configuration>
					<!-- <skipTests>true</skipTests> -->
					<suiteXmlFiles>
						<!--此处testng.xml即为要运行的testng.xml文件 -->
						<suiteXmlFile>testng.xml</suiteXmlFile>
						<!-- <suiteXmlFile>res/${xmlFileName}</suiteXmlFile> -->
					</suiteXmlFiles>
					
					<!-- 加入编码设置，否则生成的报告会中文乱码 -->
					<argLine>-Dfile.encoding=UTF-8</argLine>
					
					<properties>
						<!-- 有疑问 ，加上这段代码就没有多余的report文件了 -->
						<!-- 添加插件,添加ReportNg的监听器，生成TestNg的报告 -->
						<!-- 这里要将defaultListener设置为false，下面配置了两个listener，一个是HTMLReport，用来生成HTML格式的Report， 
							另一个是JUnitXMLReporter，这个是用来生成xml格式的report，用于jekins服务器;testng.xml为即将运行的TestNG.xml。 
							然后运行maven test，生成的报告会在target/目录下。 有了报告以后，我们会想，能不能在case执行的过程中将一些重要的 log信息也输出到report中呢?testNG中有这样一个类：Reporter，就是专门做这个工作的。 
							@Test public void test1(){ Reporter.log("This is test1"); } 这样生成的报告就既美观又实用了。 
							除了ReportNG外，我们还可以使用testNG-xslt -->
						<property>
							<name>usedefaultlisteners</name><!-- 用来禁止TestNg产生报告 -->
							<value>false</value>
						</property>

						<property>
							<name>listener</name>
							<value>
								org.uncommons.reportng.HTMLReporter,<!-- 生成HTML格式的Report -->
								org.uncommons.reportng.JUnitXMLReporter
							</value><!-- 生成xml格式的report -->
						</property>
					</properties>
					<!-- 意思是,项目中只要涉及到读写都要去target文件中,使allure-results在target文件夹下（很重要） -->

					<!-- <workingDirectory>target/</workingDirectory> --><!-- 用这个会因找不到外部的配置文件而出错 -->
					 <outputDirectory>${basedir}/target/</outputDirectory>

					<!-- Maven运行测试用例时，是通过调用maven的surefire插件并fork一个子进程来执行用例的。 forkmode属性中指明是要为每个测试 
						创建一个进程，还是所有测试在同一个进程中完成。 forkMode 可设置值有 “never”， “once”， “always” 和 “pertest”。 
						pretest： 每一个测试创建一个新进程，为每个测试 创建新的JVM是单独测试的最彻底方式，但也是最慢的，不适合hudson上持续回归。 once：在一个进程中进行所有测试。once为默认设置，在Hudson上持续回归时建议使用默认设置。 
						always：在一个进程中并行的运行脚本， Junit4.7以上版本才可以使用，surefire的版本要在2.6以上提供这个功能， 其中 threadCount：执行时，指定可分配的线程数量。只和参数parallel配合使用有效。默认：5。 -->
					<forkMode>always</forkMode>
					<!-- 自2.14版以来，参数forkMode已弃用。使用forkcount和reuseforks代替。使用forkCount参数，创建多个测试进程 -->
					<!-- <forkCount>1</forkCount> <reuseForks>true</reuseForks> -->
				</configuration>
			</plugin>
		</plugins>
	</build>

</project>
